using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Emgu.CV;
using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using ESRI.ArcGIS.Controls;


namespace VIDEO
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            this.WindowState = FormWindowState.Maximized;
        }
       
        private void button1_Click(object sender, EventArgs e)
        {
            
            string LBottomlon = textBox1.Text;
            double Lbtmlon = double.Parse(LBottomlon);//左下角经度

            string LBottomlat = textBox4.Text;
            double Lbtmlat = double.Parse(LBottomlat);//左下角纬度

            string RUplon = textBox2.Text;
            double RdbUplon = double.Parse(RUplon);//右上角经度

            string RUplat = textBox5.Text;
            double RdbUplat = double.Parse(RUplat);//右上角纬度

            string strResolution = textBox9.Text;
            double dbResolution = double.Parse(strResolution);//分辨率


            double r = (RdbUplat - Lbtmlat) / dbResolution;
            double c = (RdbUplon - Lbtmlon) / dbResolution;
            int row = (int)r;
            int col = (int)c;//行、列数


            double[,] geoxy = new double[row * col, 2];
            int n = 0;
            for (int i = 0; i < row; i++)
                for (int j = 0; j < col; j++)
                {

                    geoxy[n, 0] = Lbtmlon + (0.5 + j) * dbResolution;
                    geoxy[n, 1] = Lbtmlat + (0.5 + i) * dbResolution;
                    n++;

                }

            double[,] m = {
            {
                0.0101883693380459
                ,0.575463139519265
                ,114.031117174023 },
              {
                0.00287061530468817
                ,0.162166996887854
                ,32.1370285759963 }
                , {
                8.93261740125187E-05
                ,0.00504649193189877
                ,1}//重新计算后的单应矩阵

            //double[,] m = {
            //{
            //    0.0426698374472059
            //     , 0.728937470968091
            //     ,114.030405597979 },
            //  {
            //    0.0120240776355513
            //    ,0.205416148353671
            //    ,32.136940543624 }
            //    , {
            //    0.000374163903906221
            //    ,0.0063923748654382
            //    ,1.0 }//首次计算的单应矩阵
        };
        double[,] mInverst = new double[row *col, 2];
        mInverst = GeoFenceSys.VideoMap.CMatirxCal.MatInver(m);

            //double[,] geoxy = { { 114.031625, 32.135225 }, { 114.031675, 32.135225 }, { 114.031725, 32.135225 }, { 114.031775, 32.135225 },
            //    { 114.031825, 32.135225 }, { 114.031875, 32.135225 }, { 114.031925, 32.135225 }, { 114.031975, 32.135225 }, { 114.032025, 32.135225 }, { 114.032075, 32.135225 }, { 114.032125, 32.135225 }, { 114.032175, 32.135225 }, { 114.032225, 32.135225 }, { 114.032275, 32.135225 }, { 114.032325, 32.135225 }, { 114.032375, 32.135225 }, { 114.032425, 32.135225 }, { 114.032475, 32.135225 }, { 114.032525, 32.135225 }, { 114.032575, 32.135225 }, { 114.032625, 32.135225 }, { 114.032675, 32.135225 }, { 114.032725, 32.135225 }, { 114.032775, 32.135225 }, { 114.032825, 32.135225 }, { 114.032875, 32.135225 }, { 114.031625, 32.135275 }, { 114.031675, 32.135275 }, { 114.031725, 32.135275 }, { 114.031775, 32.135275 }, { 114.031825, 32.135275 }, { 114.031875, 32.135275 }, { 114.031925, 32.135275 }, { 114.031975, 32.135275 }, { 114.032025, 32.135275 }, { 114.032075, 32.135275 }, { 114.032125, 32.135275 }, { 114.032175, 32.135275 }, { 114.032225, 32.135275 }, { 114.032275, 32.135275 }, { 114.032325, 32.135275 }, { 114.032375, 32.135275 }, { 114.032425, 32.135275 }, { 114.032475, 32.135275 }, { 114.032525, 32.135275 }, { 114.032575, 32.135275 }, { 114.032625, 32.135275 }, { 114.032675, 32.135275 }, { 114.032725, 32.135275 }, { 114.032775, 32.135275 }, { 114.032825, 32.135275 }, { 114.032875, 32.135275 }, { 114.031625, 32.135325 }, { 114.031675, 32.135325 }, { 114.031725, 32.135325 }, { 114.031775, 32.135325 }, { 114.031825, 32.135325 }, { 114.031875, 32.135325 }, { 114.031925, 32.135325 }, { 114.031975, 32.135325 }, { 114.032025, 32.135325 }, { 114.032075, 32.135325 }, { 114.032125, 32.135325 }, { 114.032175, 32.135325 }, { 114.032225, 32.135325 }, { 114.032275, 32.135325 }, { 114.032325, 32.135325 }, { 114.032375, 32.135325 }, { 114.032425, 32.135325 }, { 114.032475, 32.135325 }, { 114.032525, 32.135325 }, { 114.032575, 32.135325 }, { 114.032625, 32.135325 }, { 114.032675, 32.135325 }, { 114.032725, 32.135325 }, { 114.032775, 32.135325 }, { 114.032825, 32.135325 }, { 114.032875, 32.135325 }, { 114.031625, 32.135375 }, { 114.031675, 32.135375 }, { 114.031725, 32.135375 }, { 114.031775, 32.135375 }, { 114.031825, 32.135375 }, { 114.031875, 32.135375 }, { 114.031925, 32.135375 }, { 114.031975, 32.135375 }, { 114.032025, 32.135375 }, { 114.032075, 32.135375 }, { 114.032125, 32.135375 }, { 114.032175, 32.135375 }, { 114.032225, 32.135375 }, { 114.032275, 32.135375 }, { 114.032325, 32.135375 }, { 114.032375, 32.135375 }, { 114.032425, 32.135375 }, { 114.032475, 32.135375 }, { 114.032525, 32.135375 }, { 114.032575, 32.135375 }, { 114.032625, 32.135375 }, { 114.032675, 32.135375 }, { 114.032725, 32.135375 }, { 114.032775, 32.135375 }, { 114.032825, 32.135375 }, { 114.032875, 32.135375 }, { 114.031625, 32.135425 }, { 114.031675, 32.135425 }, { 114.031725, 32.135425 }, { 114.031775, 32.135425 }, { 114.031825, 32.135425 }, { 114.031875, 32.135425 }, { 114.031925, 32.135425 }, { 114.031975, 32.135425 }, { 114.032025, 32.135425 }, { 114.032075, 32.135425 }, { 114.032125, 32.135425 }, { 114.032175, 32.135425 }, { 114.032225, 32.135425 }, { 114.032275, 32.135425 }, { 114.032325, 32.135425 }, { 114.032375, 32.135425 }, { 114.032425, 32.135425 }, { 114.032475, 32.135425 }, { 114.032525, 32.135425 }, { 114.032575, 32.135425 }, { 114.032625, 32.135425 }, { 114.032675, 32.135425 }, { 114.032725, 32.135425 }, { 114.032775, 32.135425 }, { 114.032825, 32.135425 }, { 114.032875, 32.135425 }, { 114.031625, 32.135475 }, { 114.031675, 32.135475 }, { 114.031725, 32.135475 }, { 114.031775, 32.135475 }, { 114.031825, 32.135475 }, { 114.031875, 32.135475 }, { 114.031925, 32.135475 }, { 114.031975, 32.135475 }, { 114.032025, 32.135475 }, { 114.032075, 32.135475 }, { 114.032125, 32.135475 }, { 114.032175, 32.135475 }, { 114.032225, 32.135475 }, { 114.032275, 32.135475 }, { 114.032325, 32.135475 }, { 114.032375, 32.135475 }, { 114.032425, 32.135475 }, { 114.032475, 32.135475 }, { 114.032525, 32.135475 }, { 114.032575, 32.135475 }, { 114.032625, 32.135475 }, { 114.032675, 32.135475 }, { 114.032725, 32.135475 }, { 114.032775, 32.135475 }, { 114.032825, 32.135475 }, { 114.032875, 32.135475 }, { 114.031625, 32.135525 }, { 114.031675, 32.135525 }, { 114.031725, 32.135525 }, { 114.031775, 32.135525 }, { 114.031825, 32.135525 }, { 114.031875, 32.135525 }, { 114.031925, 32.135525 }, { 114.031975, 32.135525 }, { 114.032025, 32.135525 }, { 114.032075, 32.135525 }, { 114.032125, 32.135525 }, { 114.032175, 32.135525 }, { 114.032225, 32.135525 }, { 114.032275, 32.135525 }, { 114.032325, 32.135525 }, { 114.032375, 32.135525 }, { 114.032425, 32.135525 }, { 114.032475, 32.135525 }, { 114.032525, 32.135525 }, { 114.032575, 32.135525 }, { 114.032625, 32.135525 }, { 114.032675, 32.135525 }, { 114.032725, 32.135525 }, { 114.032775, 32.135525 }, { 114.032825, 32.135525 }, { 114.032875, 32.135525 }, { 114.031625, 32.135575 }, { 114.031675, 32.135575 }, { 114.031725, 32.135575 }, { 114.031775, 32.135575 }, { 114.031825, 32.135575 }, { 114.031875, 32.135575 }, { 114.031925, 32.135575 }, { 114.031975, 32.135575 }, { 114.032025, 32.135575 }, { 114.032075, 32.135575 }, { 114.032125, 32.135575 }, { 114.032175, 32.135575 }, { 114.032225, 32.135575 }, { 114.032275, 32.135575 }, { 114.032325, 32.135575 }, { 114.032375, 32.135575 }, { 114.032425, 32.135575 }, { 114.032475, 32.135575 }, { 114.032525, 32.135575 }, { 114.032575, 32.135575 }, { 114.032625, 32.135575 }, { 114.032675, 32.135575 }, { 114.032725, 32.135575 }, { 114.032775, 32.135575 }, { 114.032825, 32.135575 }, { 114.032875, 32.135575 }, { 114.031625, 32.135625 }, { 114.031675, 32.135625 }, { 114.031725, 32.135625 }, { 114.031775, 32.135625 }, { 114.031825, 32.135625 }, { 114.031875, 32.135625 }, { 114.031925, 32.135625 }, { 114.031975, 32.135625 }, { 114.032025, 32.135625 }, { 114.032075, 32.135625 }, { 114.032125, 32.135625 }, { 114.032175, 32.135625 }, { 114.032225, 32.135625 }, { 114.032275, 32.135625 }, { 114.032325, 32.135625 }, { 114.032375, 32.135625 }, { 114.032425, 32.135625 }, { 114.032475, 32.135625 }, { 114.032525, 32.135625 }, { 114.032575, 32.135625 }, { 114.032625, 32.135625 }, { 114.032675, 32.135625 }, { 114.032725, 32.135625 }, { 114.032775, 32.135625 }, { 114.032825, 32.135625 }, { 114.032875, 32.135625 }, { 114.031625, 32.135675 }, { 114.031675, 32.135675 }, { 114.031725, 32.135675 }, { 114.031775, 32.135675 }, { 114.031825, 32.135675 }, { 114.031875, 32.135675 }, { 114.031925, 32.135675 }, { 114.031975, 32.135675 }, { 114.032025, 32.135675 }, { 114.032075, 32.135675 }, { 114.032125, 32.135675 }, { 114.032175, 32.135675 }, { 114.032225, 32.135675 }, { 114.032275, 32.135675 }, { 114.032325, 32.135675 }, { 114.032375, 32.135675 }, { 114.032425, 32.135675 }, { 114.032475, 32.135675 }, { 114.032525, 32.135675 }, { 114.032575, 32.135675 }, { 114.032625, 32.135675 }, { 114.032675, 32.135675 }, { 114.032725, 32.135675 }, { 114.032775, 32.135675 }, { 114.032825, 32.135675 }, { 114.032875, 32.135675 }, { 114.031625, 32.135725 }, { 114.031675, 32.135725 }, { 114.031725, 32.135725 }, { 114.031775, 32.135725 }, { 114.031825, 32.135725 }, { 114.031875, 32.135725 }, { 114.031925, 32.135725 }, { 114.031975, 32.135725 }, { 114.032025, 32.135725 }, { 114.032075, 32.135725 }, { 114.032125, 32.135725 }, { 114.032175, 32.135725 }, { 114.032225, 32.135725 }, { 114.032275, 32.135725 }, { 114.032325, 32.135725 }, { 114.032375, 32.135725 }, { 114.032425, 32.135725 }, { 114.032475, 32.135725 }, { 114.032525, 32.135725 }, { 114.032575, 32.135725 }, { 114.032625, 32.135725 }, { 114.032675, 32.135725 }, { 114.032725, 32.135725 }, { 114.032775, 32.135725 }, { 114.032825, 32.135725 }, { 114.032875, 32.135725 }, { 114.031625, 32.135775 }, { 114.031675, 32.135775 }, { 114.031725, 32.135775 }, { 114.031775, 32.135775 }, { 114.031825, 32.135775 }, { 114.031875, 32.135775 }, { 114.031925, 32.135775 }, { 114.031975, 32.135775 }, { 114.032025, 32.135775 }, { 114.032075, 32.135775 }, { 114.032125, 32.135775 }, { 114.032175, 32.135775 }, { 114.032225, 32.135775 }, { 114.032275, 32.135775 }, { 114.032325, 32.135775 }, { 114.032375, 32.135775 }, { 114.032425, 32.135775 }, { 114.032475, 32.135775 }, { 114.032525, 32.135775 }, { 114.032575, 32.135775 }, { 114.032625, 32.135775 }, { 114.032675, 32.135775 }, { 114.032725, 32.135775 }, { 114.032775, 32.135775 }, { 114.032825, 32.135775 }, { 114.032875, 32.135775 } };

            double[,] geopix = GeoFenceSys.VideoMap.CMatirxCal.GetPixCoors(geoxy, mInverst);

            //Mat imgage = CvInvoke.Imread("d:\\test.jpg", LoadImageType.Unchanged);
            Mat imgage = CvInvoke.Imread("d:\\test.jpg", ImreadModes.Unchanged);
            double[,] pix = new double[row * col, 2];
        Image<Bgra, Byte> img = new Image<Bgra, Byte>(col,row);
        Image<Bgra, byte> img1 = new Image<Bgra, byte>(imgage.Bitmap);

            List<Bgra> lstPix = new List<Bgra>();
            for (int i = 0; i< row * col; i++)
              
                {
                    int pixi = (int)geopix[i , 0];
                    int pixj = (int)geopix[i , 1];

                Bgra tmp1;
                if (pixi<0||pixj<0||pixi>=img1.Width||pixj>=img1.Height)
                {
                     tmp1 = new Bgra(255, 0, 0, 0);
                   
                }
              
                else

                 tmp1 = img1[pixj, pixi];

                ////Bgra tmp = new Bgra(255, 0, 0, 255);
                ////img[i, j] = tmp1;
                lstPix.Add(tmp1);



            }

            for (int i = 0; i < row; i++)
                for (int j = 0; j < col; j++)
                {
                    Bgra temp= lstPix[row*col - (i + 1) * col + j];
                    img[i, j] = temp;
                    //geoxy[] = temp;
                }
            
     
            imageBox2.Image = img;//在ImageBox2控件中显示图像


            

           
          
            int a = 0;
            for (int i = 0; i < row; i++)
                for (int j = 0; j < col; j++)
                {

                    geoxy[a, 0] = Lbtmlon + (0.5 + j) * dbResolution;
                    geoxy[a, 1] = Lbtmlat + (0.5 + i) * dbResolution;

                    int geox = (int)geoxy[a, 0];
                    int geoy = (int)geoxy[a, 1];
                    a++;
                    


                   
                    //lstGeoxy.Add();

                }

            
        }

         



private void button2_Click(object sender, EventArgs e)
        {
            double[,] m = {
       {  0.0426698374472059
         , 0.728937470968091
         ,114.030405597979 },
      { 0.0120240776355513
        ,0.205416148353671
        ,32.136940543624 }
        , { 0.000374163903906221
        ,0.0063923748654382
        ,1.0 }
    };
            double[,] mInverst = new double[3, 3];
            mInverst = GeoFenceSys.VideoMap.CMatirxCal.MatInver(m);

            double[,] geoxy ={{114.0316,32.1364},{114.0318,32.1364 },{114.032,32.1364 }
                          ,{114.0316,32.1362},{114.0318,32.1362},{114.032,32.1362}
                          ,{114.0316,32.1361},{114.0318,32.1361 },{114.032,32.1361 }};
            double[,] geopix = GeoFenceSys.VideoMap.CMatirxCal.GetPixCoors(geoxy, mInverst);
            //Mat img0 = CvInvoke.Imread("d:\\test.jpg", LoadImageType.Unchanged);
            Mat img0 = CvInvoke.Imread("d:\\test.jpg", ImreadModes.Unchanged);
            double[,] pix = new double[3, 3];
            //for(int q=0; q<img0.Height; q++)
            //    for (int p = 0; p < img0.Width; p++)
            //    {
            //}
            Image<Bgra, Byte> img = new Image<Bgra, Byte>(3, 3);
            Image<Bgra, byte> img1 = new Image<Bgra, byte>(img0.Bitmap);


            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                {
                    int pixi = (int)geopix[i * 3 + j, 0];
                    int pixj = (int)geopix[i * 3 + j, 1];

                    Bgra tmp1 = img1[pixi, pixj];
                    //Bgra tmp = new Bgra(255, 0, 0, 255);
                    img[i, j] = tmp1;

                }
            imageBox1.Image = img;//在ImageBox1控件中显示图像

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }

        private void imageBox1_Click(object sender, EventArgs e)
        {

        }

        private void textBox9_TextChanged(object sender, EventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {

            string LBottomlon = textBox1.Text;
            double Lbtmlon = double.Parse(LBottomlon);

            string LBottomlat = textBox4.Text;
            double Lbtmlat = double.Parse(LBottomlat);

            string RUplon = textBox2.Text;
            double RdbUplon = double.Parse(RUplon);

            string RUplat = textBox5.Text;
            double RdbUplat = double.Parse(RUplat);

            string strResolution = textBox9.Text;
            double dbResolution = double.Parse(strResolution);


            double r = (RdbUplat - Lbtmlat) / dbResolution;
           double c = (RdbUplon - Lbtmlon) / dbResolution;
            int row = (int)r;
            int col = (int)c;
            textBox3.Text = row.ToString();
            textBox6.Text = col.ToString();

            double R = ((RdbUplon - Lbtmlon) / col);
            double C = ((RdbUplat - Lbtmlat) / row);

            double[,] lonMat = new double[row, col];
            double[,] latMat = new double[row, col];



            for (int i = 0; i < row; i++)
                for (int j = 0; j < col; j++)
                {
                    lonMat[i, j] = Lbtmlon + (0.5 + j) * dbResolution;
                    latMat[i, j] = Lbtmlat + (0.5 + i) * dbResolution;
                    textBox7.Text = textBox7.Text +/*"{"+*/ lonMat[i, j].ToString() + "," + latMat[i, j].ToString()/*+*//*"},"*/;
                  


                }



            




        }

        private void textBox4_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox5_TextChanged(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {
            splitContainer1.SplitterDistance = 340;
        }
    }
}

